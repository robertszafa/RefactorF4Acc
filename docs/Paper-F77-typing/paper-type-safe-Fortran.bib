@inproceedings{overbey2005refactorings,
  title={Refactorings for Fortran and high-performance computing},
  author={Overbey, Jeffrey and Xanthos, Spiros and Johnson, Ralph and Foote, Brian},
  booktitle={Proceedings of the second international workshop on Software engineering for high performance computing system applications},
  pages={37--39},
  year={2005},
  organization={ACM}
}


@inproceedings{liao2010rose,
  title={A ROSE-based OpenMP 3.0 research compiler supporting multiple runtime libraries},
  author={Liao, Chunhua and Quinlan, Daniel J and Panas, Thomas and De Supinski, Bronis R},
  booktitle={International Workshop on OpenMP},
  pages={15--28},
  year={2010},
  organization={Springer}
}


@inproceedings{amini2011pips,
  title={PIPS is not (just) polyhedral software adding GPU code generation in PIPS},
  author={Amini, Mehdi and Ancourt, Corinne and Coelho, Fabien and Creusillet, B{\'e}atrice and Guelton, Serge and Irigoin, Fran{\c{c}}ois and Jouvelot, Pierre and Keryell, Ronan and Villalon, Pierre},
  booktitle={First International Workshop on Polyhedral Compilation Techniques (IMPACT 2011) in conjonction with CGO 2011},
  year={2011}
}


@inproceedings{tinetti2012fortran,
  title={Fortran legacy software: source code update and possible parallelisation issues},
  author={Tinetti, Fernando G and M{\'e}ndez, Mariano},
  booktitle={ACM SIGPLAN Fortran Forum},
  volume={31},
  number={1},
  pages={5--22},
  year={2012},
  organization={ACM}
}

@article{YAMAMOTO2014576,
title = "2014 International Conference on Computational Science The K computer Operations: Experiences and Statistics",
journal = "Procedia Computer Science",
volume = "29",
number = "",
pages = "576 - 585",
year = "2014",
note = "",
issn = "1877-0509",
doi = "http://dx.doi.org/10.1016/j.procs.2014.05.052",
url = "http://www.sciencedirect.com/science/article/pii/S1877050914002294",
author = "David Abramson and Michael Lees and Valeria Krzhizhanovskaya and Jack Dongarra and Peter M.A. Sloot and Keiji Yamamoto and Atsuya Uno and Hitoshi Murai and Toshiyuki Tsukamoto and Fumiyoshi Shoji and Shuji Matsui and Ryuichi Sekizawa and Fumichika Sueyasu and Hiroshi Uchiyama and Mitsuo Okamoto and Nobuo Ohgushi and Katsutoshi Takashina and Daisuke Wakabayashi and Yuki Taguchi and Mitsuo Yokokawa",
keywords = "Supercomputer",
keywords = "Job Characterization",
keywords = "Statistics of Failures",
keywords = "Language and Parallelization"
}

@inproceedings{Orchard:2013:UFS:2541348.2541356,
 author = {Orchard, Dominic and Rice, Andrew},
 title = {Upgrading Fortran Source Code Using Automatic Refactoring},
 booktitle = {Proceedings of the 2013 ACM Workshop on Workshop on Refactoring Tools},
 series = {WRT '13},
 year = {2013},
 isbn = {978-1-4503-2604-9},
 location = {Indianapolis, Indiana, USA},
 pages = {29--32},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/2541348.2541356},
 doi = {10.1145/2541348.2541356},
 acmid = {2541356},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {computational science, fortran, haskell, language evolution, refactoring},
} 

@book{wall2000programming,
  title={Programming perl},
  author={Wall, Larry and Christiansen, Tom and Orwant, Jon},
  year={2000},
  publisher={" O'Reilly Media, Inc."}
}
@article{ansi1978standard,
  title={Standard X3. 9-1978, Programming Language FORTRAN (revision of ANSI X2. 9-1966), American National Standards Institute},
  author={ANSI, ANSI},
  journal={Inc., Ny},
  volume={197},
  number={8},
  year={1978}
}
@article{10.1145/359619.359621,
author = {Brainerd, Walt},
title = {Fortran 77},
year = {1978},
issue_date = {Oct. 1978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {21},
number = {10},
issn = {0001-0782},
url = {https://doi.org/10.1145/359619.359621},
doi = {10.1145/359619.359621},
abstract = {There is a new standard Fortran. The official title is “American National Standard Programming Language Fortran, X3.9-1978,” but it is more commonly referred to as “Fortran 77,” since its development was completed in 1977. It replaces the Fortran standard designated X3.9-1966. This paper describes many of the features of Fortran 77 and also provides some information about how and why the standard was developed.},
journal = {Commun. ACM},
month = oct,
pages = {806–820},
numpages = {15}
}

  

@article{milner1978theory,
  title={A theory of type polymorphism in programming},
  author={Milner, Robin},
  journal={Journal of computer and system sciences},
  volume={17},
  number={3},
  pages={348--375},
  year={1978},
  publisher={Elsevier}
}
@book{pierce2002types,
  title={Types and programming languages},
  author={Pierce, Benjamin C and Benjamin, C},
  year={2002},
  publisher={MIT press}
}

@article{SCOTT1994201,
title = "The formal specification of abstract data types and their implementation in Fortran 90",
journal = "Computer Physics Communications",
volume = "84",
number = "1",
pages = "201 - 225",
year = "1994",
issn = "0010-4655",
doi = "https://doi.org/10.1016/0010-4655(94)90212-7",
url = "http://www.sciencedirect.com/science/article/pii/0010465594902127",
author = "N.S. Scott and P.L. Kilpatrick and D. Maley",
abstract = "In this paper we present an approach to the development of computational science software based on the identification and specification of Abstract Data Types and their implementation in Fortran 90. Our aim is to improve upon current standards of documentation and levels of genericity of such software, and, by the use of a formal specification notation, afford the possibility of undertaking correctness proofs. We illustrate the approach by applying it to a problem which is concerned with the construction of sets of electron configurations and their angular momentum couplings; software to solve this problem is required to enhance the Graphical R-matrix Atomic Collision Environment (GRACE) graphical user interface. In particular, we show how a formal notation can be used to specify unambigously the functionality of software components and we describe the role of the formal specification from the perspective of the ADT implementor and the ADT user. Finally we show how Fortran 90, through its derived types and module facility, directly supports the encapsulation of ADTs thereby enabling the construction of better engineered software than has hitherto been possible using Fortran."
}


@article{MALEY1996167,
title = "The formal specification of abstract data types and their implementation in Fortran 90: implementation issues concerning the use of pointers",
journal = "Computer Physics Communications",
volume = "98",
number = "1",
pages = "167 - 180",
year = "1996",
issn = "0010-4655",
doi = "https://doi.org/10.1016/0010-4655(96)00093-8",
url = "http://www.sciencedirect.com/science/article/pii/0010465596000938",
author = "D. Maley and P.L. Kilpatrick and E.W. Schreiner and N.S. Scott and G.H.F. Diercksen",
abstract = "In this paper we continue our investigation into the development of computational-science software based on the identification and formal specification of Abstract Data Types (ADTs) and their implementation in Fortran 90. In particular, we consider the consequences of using pointers when implementing a formally specified ADT in Fortran 90. Our aim is to highlight the resulting conflict between the goal of information hiding, which is central to the ADT methodology, and the space efficiency of the implementation. We show that the issue of storage recovery cannot be avoided by the ADT user, and present a range of implementations of a simple ADT to illustrate various approaches towards satisfactory storage management. Finally, we propose a set of guidelines for implementing ADTs using pointers in Fortran 90. These guidelines offer a way gracefully to provide disposal operations in Fortran 90. Such an approach is desirable since Fortran 90 does not provide automatic garbage collection which is offered by many object-oriented languages including Eiffel, Java, Smalltalk, and Simula."
}

@ARTICLE{54403,  
author={A. {Colbrook} and C. {Smythe}},  
journal={Software Engineering Journal},   
title={Formal specification of data abstraction in FORTRAN 77: abstract arrays},   
year={1990},  
volume={5},  
number={3},  
pages={151-159},  
doi={10.1049/sej.1990.0017}
}

@inproceedings{reid1999prescriptive,
  title={A prescriptive semantics of Fortran 95},
  author={Reid, N and Wray, JP},
  booktitle={ACM SIGPLAN Fortran Forum},
  volume={18},
  number={2},
  pages={2--3},
  year={1999},
  organization={ACM New York, NY, USA}
}


@ARTICLE{
   :/content/journals/10.1049/sej.1990.0017,
   author = {A. Colbrook},
   author = {C. Smythe},
   keywords = {FORTRAN 77;data organisation;maintenance;simple data structures;iterators;programming languages;encapsulation;structured development;abstract array data structure;data abstraction;formal specification;},
   ISSN = {0268-6961},
   language = {English},
   abstract = {The emphasis of data organisation on the specification, design and implementation of large systems raises the question whether data abstraction may be applied to programming languages designed before the widespread use of such techniques. The data abstraction facilities available in FORTRAN 77 are considered, and it is shown that encapsulation is possible for simple data structures. An abstract array data structure is pecified and further refined to allow the definition of iterators. An example of this structure is implemented in FORTRAN 77. The introduction of a series of abstractions is thus made possible, which facilitates structured development and efficient maintenance.},
   title = {Formal specification of data abstraction in FORTRAN 77: abstract arrays},
   journal = {Software Engineering Journal},
   issue = {3},   
   volume = {5},
   year = {1990},
   month = {May},
   pages = {151-159(8)},
   publisher ={},
   copyright = {© The Institution of Electrical Engineers},
   url = {https://digital-library.theiet.org/content/journals/10.1049/sej.1990.0017}
}


@article{contrastin2016units,
  title={Units-of-measure correctness in fortran programs},
  author={Contrastin, Mistral and Rice, Andrew and Danish, Matthew and Orchard, Dominic},
  journal={Computing in Science \& Engineering},
  volume={18},
  number={1},
  pages={102--107},
  year={2016},
  publisher={IEEE Computer Society}
}

@article{vanderbauwhede2018domain,
  title={Domain-specific acceleration and auto-parallelization of legacy scientific code in FORTRAN 77 using source-to-source compilation},
  author={Vanderbauwhede, Wim and Davidson, Gavin},
  journal={Computers \& Fluids},
  volume={173},
  pages={1--5},
  year={2018},
  publisher={Elsevier}
}


